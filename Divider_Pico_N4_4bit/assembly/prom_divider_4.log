KCPSM6 Assembler log file for program 'C:\Xilinx_projects\Divider_Pico_N4_4bit\assembly\prom_divider_4.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 14 Mar 2021
Assembly timestamp: 23:25:32

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 01F hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 32
Memory locations available: 4064


Assembly listing

 Addr Code                  Instruction

 000                        ; KCPSM6 Program
 000                        ;Author         - Vikram & Chethan
 000                        ;revised in Fall 2020, Spring 2021  - Gandhi 10/3/2020, 3/14/2021
 000                        ;File     - prom_divider_4.psm
 000                        ;**************************************************************************************
 000                        ;Port definitions
 000                        ;**************************************************************************************
 000                        CONSTANT Dividend_Divisor_port, 00'd              ;port00 used for loading info of Dividend and Divisor
 000                        CONSTANT Control_signal_port, 01'd                ;port01 used for loading info of Start and ACK signals
 000                        CONSTANT Quotient_Remainder_port, 00'd            ;port00 used for outputting Quotient and Remainder
 000                        CONSTANT Current_State_port, 01'd                 ;port01 used for outputting current state info (Done (QD), Compute (QC), Initial (QI), and Done) to LEDs
 000                        ; Current State format from divider_4_top.v
 000                        ;   Done <= out_port[0];
 000                        ;   Qi <= out_port[1];
 000                        ;   Qc <= out_port[2];
 000                        ;   Qd <= out_port[3];
 000                        CONSTANT Report_Qi, 00000010'b
 000                        CONSTANT Report_Qc, 00000100'b
 000                        CONSTANT Report_Qd_Done, 00001001'b
 000                        ; Control signal format from divider_4_top.v
 000                        ;           1'b1 : in_port <= {6'b000000,Start,Ack};
 000                        CONSTANT Mask_to_check_Start, 00000010'b
 000                        CONSTANT Mask_to_check_Ack, 00000001'b
 000                        ;**************************************************************************************
 000                        ; Special Register usage
 000                        ;**************************************************************************************
 000                        ;NAMEREG Not used here (reference page 53 in User guide Picoblaze_KCPSM6_Release9_30Sept14)
 000                        ;   One could rename registers as shown below, but I felt, it is not good to rename everything.
 000                        ;NAMEREG s0 Dividend_s0
 000                        ;NAMEREG s1 Divisor_s1
 000                        ;NAMEREG s2 Quotient_s2
 000                        ;NAMEREG s4 Control_s4
 000                        ;NAMEREG sA Quotient_Remainder_sA
 000                        ;**************************************************************************************
 000                        ;MAIN PROGRAM
 000                        ;**************************************************************************************
 000                        ;Control Signal Format in s4 {6'b000000, Start, Ack}
 000  2B021  state_initial: OUTPUTK 02[Report_Qi], 1[Current_State_port]      ; Indicating Current State as Initial State (QI)
 001  09000                 INPUT s0, 00[Dividend_Divisor_port]               ; Register s0 holds Dividend(X), Divisor(Y)
 002  00100                 LOAD s1, s0                                       ; Make a copy of XY in Register s1
 003  0310F                 AND s1, 0F                                        ; Extracting Divisor using mask 00001111 to get 0Y in s1
 004  030F0                 AND s0, F0                                        ; Extracting Dividend using mask 11110000 to get X0 in s0
 005  1400E                 SR0 s0                                            ; SR0 >> XXXX 0000 -> 0XXX X000  Right shift Operation
 006  1400E                 SR0 s0                                            ; SR0 >> 0XXX X000 -> 00XX XX00
 007  1400E                 SR0 s0                                            ; SR0 >> 00XX XX00 -> 000X XXX0
 008  1400E                 SR0 s0                                            ; SR0 >> 000X XXX0 -> 0000 XXXX - s0 has value 0X (the Dividend)
 009  01200                 LOAD s2, 00                                       ; Quotient Counter in the upper 4 bits of s2
 00A  2D000                 OUTPUT s0, 00[Quotient_Remainder_port]            ; Sending out initial Quotient and Remainder (Dividend(X)) to fabric logic
 00B  09401                 INPUT s4, 01[Control_signal_port]                 ; Load the Control Signal Information into register s4
 00C  03402                 AND s4, 02[Mask_to_check_Start]                   ; Check to see if Start Control Signal is set using 00000010'b Mask
 00D  32000                 JUMP Z, 000[state_initial]                        ; Jump back to state_initial if Start signal did not go active
 00E  2200F                 JUMP 00F[state_compute]                           ; Jump to Compute State if Start (BtnL) is pressed
 00F                        ;***************************************************************************************
 00F                        ;Compute State (Division Sequence)
 00F                        ;****************************************************************************************
 00F  2B041  state_compute: OUTPUTK 04[Report_Qc], 1[Current_State_port]      ; Indicating Current State as Compute State (QC)
 010  00A20                 LOAD sA, s2                                       ; Make a copy of quotient in the upper 4 bits of s2 in Register sA
 011  04A00                 OR sA, s0                                         ; Merge Quotient_Remainder into sA for reporting to the top design
 012  2DA00                 OUTPUT sA, 00[Quotient_Remainder_port]            ; Sending out Quotient and Remainder (Dividend(X)) to the fabric logic
 013  1C010                 COMPARE s0, s1                                    ; Compare Dividend and Divisor to check if Dividend is smaller than Divisor
 014  3A018                 JUMP C, 018[state_done]                           ; If Dividend is smaller, jump to Done State (QD)
 015  18010                 SUB s0, s1                                        ; Subtract Divisor from Dividend
 016  11210                 ADD s2, 10                                        ; Increment Quotient (in the upper fours bits of s2) after each repetitive Subtraction by adding 0001_0000 ( = 16) to s2
 017  2200F                 JUMP 00F[state_compute]                           ; If Dividend is not smaller, stay in Compute State (QC)
 018                        ;****************************************************************************************
 018                        ;Done State
 018                        ;****************************************************************************************
 018  2B091     state_done: OUTPUTK 09[Report_Qd_Done], 1[Current_State_port] ; Indicating Current State as Done State and also the Done signal (QD, Done)
 019  00A20                 LOAD sA, s2                                       ; Make a copy of quotient in the upper 4 bits of s2 in Register sA
 01A  04A00                 OR sA, s0                                         ; Merge Quotient_Remainder into sA for reporting to the top design
 01B  2DA00                 OUTPUT sA, 00[Quotient_Remainder_port]            ; Sending out Quotient and Remainder to the fabric logic
 01C  09401                 INPUT s4, 01[Control_signal_port]                 ; Load the Control Signal Information into register s4
 01D  03401                 AND s4, 01[Mask_to_check_Ack]                     ; Check to see if ACK is received
 01E  32018                 JUMP Z, 018[state_done]                           ; Jump to state_initial if ACK is received
 01F  22000                 JUMP 000[state_initial]                           ; Stay in Done State till ACK comes (until BtnR is pressed)
 020                        ;**************************************************************************************
 020                        ;Interrupt Vector
 020                        ;**************************************************************************************
 020                        ;Not used here
 020                        ;ADDRESS 3FF


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Xilinx_projects\Divider_Pico_N4_4bit\assembly\prom_divider_4.psm



List of defined constants

 CONSTANT name           Value        Source PSM File

 timestamp_hours         23'd         
 timestamp_minutes       25'd         
 timestamp_seconds       32'd         
 datestamp_year          21'd         
 datestamp_month         3'd          
 datestamp_day           14'd         
 NUL                     00           
 BEL                     07           
 BS                      08           
 HT                      09           
 LF                      0A           
 VT                      0B           
 CR                      0D           
 ESC                     1B           
 DEL                     7F           
 DCS                     90           
 ST                      9C           
 Dividend_Divisor_port   00'd         prom_divider_4.psm
 Control_signal_port     01'd         prom_divider_4.psm
 Quotient_Remainder_port 00'd         prom_divider_4.psm
 Current_State_port      01'd         prom_divider_4.psm
 Report_Qi               00000010'b   prom_divider_4.psm
 Report_Qc               00000100'b   prom_divider_4.psm
 Report_Qd_Done          00001001'b   prom_divider_4.psm
 Mask_to_check_Start     00000010'b   prom_divider_4.psm
 Mask_to_check_Ack       00000001'b   prom_divider_4.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "14 Mar 2021"  
 timestamp$        "23:25:32"     



List of line labels

   Label           Addr  Source PSM File

   state_initial   000   prom_divider_4.psm
   state_compute   00F   prom_divider_4.psm
   state_done      018   prom_divider_4.psm



Instruction usage statistics

 Instruction    Instances

 LOAD              4
 STAR              -

 AND               4
 OR                2
 XOR               -

 ADD               1
 ADDCY             -
 SUB               1
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           1
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               4
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             3
 OUTPUT            3
 OUTPUTK           3

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP              6
 JUMP@             -
 CALL              -
 CALL@             -
 RETURN            -
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
