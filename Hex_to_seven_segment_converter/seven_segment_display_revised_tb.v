//////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2010 Gandhi Puvvada, EE-Systems, VSoE, USC
//
// This design exercise, its solution, and its test-bench are confidential items.
// They are University of Southern California's (USC's) property. All rights are reserved.
// Students in our courses have right only to complete the exercise and submit it as part of their course work.
// They do not have any right on our exercise/solution or even on their completed solution as the solution contains our exercise.
// Students would be violating copyright laws besides the University's Academic Integrity rules if they post or convey to anyone
// either our exercise or our solution or their solution. 
// 
// THIS COPYRIGHT NOTICE MUST BE RETAINED AS PART OF THIS FILE (AND ITS SOLUTION AND/OR ANY OTHER DERIVED FILE) AT ALL TIMES.
//
//////////////////////////////////////////////////////////////////////////////
//
// A student would be violating the University's Academic Integrity rules if he/she gets help in writing or debugging the code 
// from anyone other than the help from his/her lab partner or his/her teaching team members in completing the exercise(s). 
// However, he/she can discuss with fellow students the method of solving the exercise. 
// But writing the code or debugging the code should not be with the help of others. 
// One should never share the code or even look at the code of others (code from classmates or seniors 
// or any code or solution posted online or on GitHub).
// 
// THIS NOTICE OF ACADEMIC INTEGRITY MUST BE RETAINED AS PART OF THIS FILE (AND ITS SOLUTION AND/OR ANY OTHER DERIVED FILE) AT ALL TIMES.
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// Course: EE354L                                							// 
// File: seven_segment_display_tb.v   (the exercise)           							//
// Sudheendra Chennupati and Gandhi Puvvada 2/9/2020                       //
////////////////////////////////////////////////////////////////////////////// 
 
`timescale 1 ns / 100 ps

module seven_segment_display_tb;

reg [3:0] hex_tb;
wire [7:0] Cout_tb;
integer test_num;
integer file_results;
reg [7:0] Cout_expected; 


// Instantiate the DUT (Design Under Test)
// module seven_segment_display (hex, Cout);
seven_segment_display seven_segment (hex_tb, Cout_tb);
				 

// It's a good idea to write a testing task so that we can call this task with different test values.
// This task applies stimulus to the DUT, computes the expected_7_seg_display_string, waits for 1 ns,
// gathers the DUT response, and produces (displays) 
// the expected display and display generated by the DUT cathode outputs. 

task SEVEN_SEGMENT_TEST;
input [3:0] hex_value;
reg [4*8:1] expected_7_seg_display_string[0:7];

	begin
		hex_tb = hex_value; // apply stimulus to the DUT
		test_num = test_num + 1;
		
		// Here we compute the expected_7_seg_display_string (ASCII string for display)and display the expected pattern.
		
		// The 7 ASCII character strings of the expected_7_seg_display_string[0:7] are  
		// individually generated using 7 case statements. Understand the "default" choice 
		// in the case statement (Pages 54-56 of the Verilog guide)
		/* Segment display: We used a pipe symbol for vertical segments and a double-underscore for horizontal segments 
		 __ 
		|__|
		|__|

		   So, we have 4 characters per row, and we have three rows as shown above.
		   Notice the declaration with size
		   reg [4*8:1] expected_7_seg_display_string[0:7];
		*/

		//Segment Ca display
		case (hex_tb)
			8'h1,8'h4,8'hb,8'hd : expected_7_seg_display_string[0] = "    ";
			default				: expected_7_seg_display_string[0] = " __ ";
		endcase	
		
		//Segment Cb display
		case (hex_tb)
			8'h5,8'h6,8'hb,8'hc,8'he,8'hf : expected_7_seg_display_string[1] = " ";
			default						  : expected_7_seg_display_string[1] = "|";
		endcase
		
		//Segment Cc display 
		case (hex_tb)
			8'h2,8'hc,8'he,8'hf : expected_7_seg_display_string[2] = " ";
			default				: expected_7_seg_display_string[2] = "|";
		endcase
		
		//Segment Cd display
		case (hex_tb)
			8'h1,8'h4,8'h7,8'ha,8'hf : expected_7_seg_display_string[3] = "  ";
			default				     : expected_7_seg_display_string[3] = "__";
		endcase
		
		//Segment Ce display
		case (hex_tb)
			8'h1,8'h3,8'h4,8'h5,8'h7,8'h9 : expected_7_seg_display_string[4] = " ";
			default						  : expected_7_seg_display_string[4] = "|";
		endcase
		
		//Segment Cf display
		case (hex_tb)
			8'h1,8'h2,8'h3,8'h7,8'hd : expected_7_seg_display_string[5] = " ";
			default				     : expected_7_seg_display_string[5] = "|";
		endcase
		
		case (hex_tb)
			8'h0,8'h1,8'h7,8'hc : expected_7_seg_display_string[6] = "  ";
			default				: expected_7_seg_display_string[6] = "__";
		endcase
		
		case (hex_tb)
			//  cathode letter designations   abcd_efgp 
				4'b0000	: Cout_expected  = 8'b1000_0001; // Display 0
				4'b0001	: Cout_expected  = 8'b1111_0011; // Display 1
				4'b0010	: Cout_expected  = 8'b0100_1001; // Display 2
				4'b0011	: Cout_expected  = 8'b0110_0001; // Display 3
				4'b0100	: Cout_expected  = 8'b0011_0011; // Display 4
				4'b0101	: Cout_expected  = 8'b0010_0101; // Display 5
				4'b0110	: Cout_expected  = 8'b0000_0101; // Display 6
				4'b0111	: Cout_expected  = 8'b1111_0001; // Display 7
				4'b1000	: Cout_expected  = 8'b0000_0001; // Display 8
				4'b1001	: Cout_expected  = 8'b0011_0001; // Display 9 // 9 without the bottom base (d segment inactivated)!
				4'b1010	: Cout_expected  = 8'b0001_0001; // Display A
				4'b1011	: Cout_expected  = 8'b0000_0111; // Display b
				4'b1100	: Cout_expected  = 8'b1000_1101; // Display C
				4'b1101	: Cout_expected  = 8'b0100_0011; // Display d
				4'b1110	: Cout_expected  = 8'b0000_1101; // Display E
				4'b1111	: Cout_expected  = 8'b0001_1101; // Display F
				// "default" case branch needed only if you did not cover all cases
			endcase
		
		#1; // wait for a little time after the stimulus (hex_tb = hex_value;) is applied
		$display ("Test # = %0d ", test_num);
		$display ("Input:   Hex_input = %h ", hex_tb);
		$display ("Output: Cathode_output = %b  ", Cout_tb);
		$display ("%0s",expected_7_seg_display_string[0]," ","     ", ); 
		$display ("%0s%0s%0s",expected_7_seg_display_string[5],expected_7_seg_display_string[6],expected_7_seg_display_string[1]);
		$display ("%0s%0s%0s",expected_7_seg_display_string[4],expected_7_seg_display_string[3],expected_7_seg_display_string[2]);
		$display (" ");
	    // output to file
		$fdisplay (file_results,"Test # = %0d ", test_num);
		$fdisplay (file_results,"Input:   Hex_input = %h ", hex_tb);
		$fdisplay (file_results,"Output: Cathode_output = %b  ", Cout_tb);
		$fdisplay (file_results,"%0s",expected_7_seg_display_string[0]); 
		$fdisplay (file_results,"%0s%0s%0s",expected_7_seg_display_string[5],expected_7_seg_display_string[6],expected_7_seg_display_string[1]);
		$fdisplay (file_results,"%0s%0s%0s",expected_7_seg_display_string[4],expected_7_seg_display_string[3],expected_7_seg_display_string[2]);
		$fdisplay (file_results," ");
		#19;
	end

endtask

initial
  begin  : STIMULUS
      file_results = $fopen("seven_segment_output_results.txt", "w");
      test_num = -1;
      
	  // test #0 begin
	    SEVEN_SEGMENT_TEST (8'h0); 
	  // test #0 end

	  // test #1 begin
	  	SEVEN_SEGMENT_TEST (8'h1); 
	  // test #1 end
	  
	  // test #2 begin
	  	SEVEN_SEGMENT_TEST (8'h2); 
	  // test #2 end
	  
	  // test #3 begin
	  	SEVEN_SEGMENT_TEST (8'h3); 
	  // test #3 end
	  
	  // test #4 begin
	  	SEVEN_SEGMENT_TEST (8'h4); 
	  // test #4 end
	  
	  // test #5 begin
	  	SEVEN_SEGMENT_TEST (8'h5); 
	  // test #5 end
	  
	  // test #6 begin
	  	SEVEN_SEGMENT_TEST (8'h6); 
	  // test #6 end
	  
	  // test #7 begin
	  	SEVEN_SEGMENT_TEST (8'h7); 
	  // test #7 end
	  
	  // test #8 begin
	  	SEVEN_SEGMENT_TEST (8'h8); 
	  // test #8 end
	  
	  // test #9 begin
	  	SEVEN_SEGMENT_TEST (8'h9); 
	  // test #9 end
	  
	  // test #10 begin
	  	SEVEN_SEGMENT_TEST (8'ha); 
	  // test #10 end
	  
	  // test #11 begin
	  	SEVEN_SEGMENT_TEST (8'hb); 
	  // test #11 end
	  
	  // test #12 begin
	  	SEVEN_SEGMENT_TEST (8'hc); 
	  // test #12 end
	  
	  // test #13 begin
	  	SEVEN_SEGMENT_TEST (8'hd); 
	  // test #13 end
	  
	  // test #14 begin
	  	SEVEN_SEGMENT_TEST (8'he); 
	  // test #14 end
	  
	  // test #15 begin
	  	SEVEN_SEGMENT_TEST (8'hf); 
	  // test #15 end
	  
	  
	  $display ("All tests concluded!");
	  if (Cout_expected == Cout_tb)
	       $display ("DUT produced cathodes as expected!");
	  else 
	       $display ("DUT cathodes differed from what we expected :(");
	  $fdisplay (file_results,"All tests concluded!");
	  $fclose (file_results);
  end

endmodule 

/* Exercise
	
	1. Mr. Trojan looked at the output of the above testbench. He noted that it has test numbers off by 1.
	   
		Test # = 1 
		Input:   Hex_input = 0 
		Output: Cathode_output = 10000001  
		 __ 
		|  |
		|__|
		
	   He wanted the test numbers to start with zero to match the hex number he is testing.
	   Please revise the testbench to make this happen. 
	   Call your revised testbench seven_segment_display_revised_tb.v. Run it to test and verify.
	   Please fix the line in the .do file to reflect the name change in the testbench before testing the testbench.

	2.  Miss Trojan wanted you to add additional check to your revised testbench (seven_segment_display_revised_tb.v).
		   She wanted you to check if the designer of DUT produced in cathodes (Cout_tb) the correct cathode value (Cout_expected) 
		   and send out a message saying 
		   either
		   DUT produced cathodes as expected!
		   or
		   DUT cathodes differed from what we expected :(
		She suggested that you define a variable Cout_expected (you decide whether it should be a reg type or wire type) 
		and produce Cout_expected using the following case statement in your revised testbench.
		
			case (hex_tb)
			//  cathode letter designations   abcd_efgp 
				4'b0000	: Cout_expected  = 8'b1000_0001; // Display 0
				4'b0001	: Cout_expected  = 8'b1111_0011; // Display 1
				4'b0010	: Cout_expected  = 8'b0100_1001; // Display 2
				4'b0011	: Cout_expected  = 8'b0110_0001; // Display 3
				4'b0100	: Cout_expected  = 8'b0011_0011; // Display 4
				4'b0101	: Cout_expected  = 8'b0010_0101; // Display 5
				4'b0110	: Cout_expected  = 8'b0000_0101; // Display 6
				4'b0111	: Cout_expected  = 8'b1111_0001; // Display 7
				4'b1000	: Cout_expected  = 8'b0000_0001; // Display 8
				4'b1001	: Cout_expected  = 8'b0011_0001; // Display 9 // 9 without the bottom base (d segment inactivated)!
				4'b1010	: Cout_expected  = 8'b0001_0001; // Display A
				4'b1011	: Cout_expected  = 8'b0000_0111; // Display b
				4'b1100	: Cout_expected  = 8'b1000_1101; // Display C
				4'b1101	: Cout_expected  = 8'b0100_0011; // Display d
				4'b1110	: Cout_expected  = 8'b0000_1101; // Display E
				4'b1111	: Cout_expected  = 8'b0001_1101; // Display F
				// "default" case branch needed only if you did not cover all cases
			endcase
			
		Because, Miss Trojan coded "9" differently from the standard "9", 
		you are expected to produce in your output, the following:
Test # = 9 
Input:   Hex_input = 9 
Output: Cathode_output = 00100001  
 __ 
|__|
 __|
 
DUT cathodes differed from what we expected :(		
*/